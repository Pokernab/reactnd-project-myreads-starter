{"version":3,"sources":["BooksAPI.js","containers/Funcs/funcs.js","components/Search/SearchInput.js","components/Book/Book.js","components/Search/SearchBooksGrid.js","containers/SearchBooks.js","components/BookShelf/Shelf/ShelfTitle/ShelfTitle.js","components/BookShelf/Shelf/ShelfGrid/ShelfGrid.js","components/BookShelf/Shelf/BookOnShelf/BookOnShelf.js","components/BookShelf/BookShelf.js","containers/MainPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","concat","then","res","json","data","book","getAll","books","update","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","getBooksFromAPI","booksAPI","that","shelfBooksUpdated","toConsumableArray","state","shelfBooks","updatedObj","searchBookResult","searchQuery","setState","shownBooks","searchBooks","error","filter","searchBook","isShelfed","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","shelfBook","value","push","err","return","props","react_default","a","createElement","className","react_router_dom","to","type","placeholder","onChange","change","select","defaultValue","event","bookIntoShelf","disabled","style","width","height","backgroundImage","URL","title","author","searchBooksGrid","bookArr","items","key","Book","imageLinks","smallThumbnail","authors","SearchBooks","changeQueryHandler","_this","target","assertThisInitialized","bookIntoShelfHandler","idObj","readStatus","_this2","this","react","SearchInput","SearchBooksGrid","Component","shelfTitle","shelfGrid","changeShelf","bookShelf","ShelfGrid","ShelfTitle","BookOnShelf","MainPage","allBooks","wantToRead","currentlyReading","read","getAllBooks","BooksAPI","updateReadStatus","changeShelfHandler","readType","toSearch","BookShelf","BooksApp","routes","react_router","path","exact","component","Search","React","app","src_App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.340544b8.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","\r\n// updateObj = Books that are on a shelf & books that were found from searchAPI\r\n//filter is used to remove all books that are the same as the books on the shelf (pushing those books to updateObj)\r\n// concating the updateObj into searchResult -> all the shelfs books will have a shelf prop \r\nexport const getBooksFromAPI = (booksAPI, that) => {\r\n    const shelfBooksUpdated = [...that.state.shelfBooks];\r\n    const updatedObj = []\r\n    let searchBookResult = []\r\n    that.state.searchQuery === '' ?\r\n        that.setState({ shownBooks: [] })\r\n        : booksAPI.search(that.state.searchQuery).then(searchBooks => {\r\n            searchBooks.error ?\r\n                that.setState({ shownBooks: [] })\r\n                : searchBookResult = searchBooks.filter(searchBook => {\r\n                    let isShelfed = false;\r\n                    for (let shelfBook of shelfBooksUpdated) {\r\n                        if (shelfBook.id === searchBook.id && !isShelfed) {\r\n                            updatedObj.push(shelfBook);\r\n                            isShelfed = true;\r\n                            break;\r\n                        }\r\n                        else\r\n                            isShelfed = false;\r\n                    };\r\n                    return !isShelfed;\r\n                });\r\n            that.setState({ shownBooks: searchBookResult.concat(updatedObj) })\r\n        });\r\n};","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst searchBooks = (props) => {\r\n    return <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n            <NavLink to='/'><button className=\"close-search\">Close</button></NavLink>\r\n            <div className=\"search-books-input-wrapper\">\r\n                <input type=\"text\" placeholder=\"Search by title or author\" value={props.query} onChange={props.change} />\r\n            </div>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default searchBooks;\r\n","import React from 'react';\r\n\r\n\r\nconst book = (props) => {\r\n  const select = (\r\n    <select   defaultValue={props.shelf ? props.shelf : 'move'}  onChange={(event) => props.bookIntoShelf(props.book, event)}>\r\n      <option value=\"move\" disabled>Move to...</option>\r\n      <option value=\"currentlyReading\">Currently Reading</option>\r\n      <option value=\"wantToRead\">Want to Read</option>\r\n      <option value=\"read\">Read</option>\r\n      <option value=\"none\">None</option>\r\n    </select> \r\n  );\r\n\r\n\r\n  return (\r\n    <div className=\"book\">\r\n      <div className=\"book-top\">\r\n        <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${props.URL})` }}></div>\r\n        <div className=\"book-shelf-changer\">\r\n          {select}\r\n        </div>\r\n      </div>\r\n      <div className=\"book-title\">{props.title}</div>\r\n      <div className=\"book-authors\">{props.author}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default book;","import React from 'react';\r\n\r\nimport Book from '../Book/Book';\r\n\r\nconst searchBooksGrid = (props) => {\r\n    const { shownBooks } = props;\r\n    let bookArr = [];\r\n    if (shownBooks.error) {  bookArr = shownBooks.items }\r\n    else {\r\n        for (let book of shownBooks) {\r\n            bookArr.push(\r\n                <li key={book.id}>\r\n                    <Book\r\n                        shelf={book.shelf}\r\n                        bookIntoShelf={props.bookIntoShelf}\r\n                        book={book}\r\n                        URL={book.imageLinks ? book.imageLinks.smallThumbnail : null}\r\n                        title={book.title}\r\n                        author={book.authors}\r\n                    />\r\n                </li>\r\n            );\r\n        };\r\n    }\r\n    return (\r\n        <div className=\"search-books-results\">\r\n            <ol className=\"books-grid\">\r\n                {bookArr}\r\n            </ol>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default searchBooksGrid;\r\n","import React, { Component, Fragment } from 'react';\r\n\r\nimport * as booksAPI from '../BooksAPI';\r\nimport { getBooksFromAPI } from './Funcs/funcs';\r\nimport SearchInput from '../components/Search/SearchInput';\r\nimport SearchBooksGrid from '../components/Search/SearchBooksGrid';\r\n\r\n//State -> \r\n// searchQuery -> value of search input\r\n// shelfBooks -> books that were on the shelf once we loaded this component\r\n// shownBooks -> currently shown books on the page\r\n\r\nclass SearchBooks extends Component {\r\n    state = {\r\n        shelfBooks: [],\r\n        searchQuery: '',\r\n        shownBooks: [],\r\n    };\r\n    componentDidMount() {\r\n        //Fetching all books that are currently on shelf\r\n        booksAPI.getAll().then( res => this.setState({shelfBooks: res}) );\r\n    }\r\n    //Listen to  input value and set searchQuery equals to it -> use getBooksFromAPI func passing (API, this)\r\n    changeQueryHandler = (event) => {\r\n        this.setState({ searchQuery: event.target.value }, () => getBooksFromAPI(booksAPI, this));     \r\n    };\r\n    //Change the shelf of a current book. (idObj = Book object, event = selected value)\r\n    bookIntoShelfHandler = (idObj, event) => {\r\n        const readStatus = event.target.value\r\n        booksAPI.update(idObj, readStatus)\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <SearchInput\r\n                    query={this.state.searchQuery}\r\n                    change={this.changeQueryHandler} />\r\n                <SearchBooksGrid\r\n                    bookIntoShelf={this.bookIntoShelfHandler}\r\n                    shownBooks={this.state.shownBooks} />\r\n            </Fragment>\r\n        );\r\n    };\r\n};\r\n\r\nexport default SearchBooks;","import React from 'react';\r\n\r\nconst shelfTitle = (props) => {\r\n    return (\r\n        <h2 className=\"bookshelf-title\">{props.title}</h2>\r\n    );\r\n};\r\n\r\nexport default shelfTitle;","import React from 'react';\r\n\r\nimport Book from '../../../Book/Book';\r\n\r\nconst shelfGrid = (props) => {\r\n        const bookArr = [];\r\n        for (let book of props.shelfBooks) {\r\n            bookArr.push(\r\n                <li key={book.id}>\r\n                    <Book\r\n                        shelf={book.shelf}\r\n                        book={book}\r\n                        bookIntoShelf={props.changeShelf}\r\n                        URL={book.imageLinks ? book.imageLinks.smallThumbnail : null}\r\n                        title={book.title}\r\n                        author={book.authors}\r\n                    />\r\n                </li>\r\n            );\r\n        };\r\n    return (\r\n        <ol className=\"books-grid\">\r\n            {bookArr}\r\n        </ol>\r\n    );\r\n};\r\n\r\n\r\nexport default shelfGrid;","import React from 'react';\r\n\r\nimport ShelfGrid from '../ShelfGrid/ShelfGrid';\r\n\r\nconst bookShelf = ( props ) => {\r\n    return (\r\n        <div className=\"bookshelf-books\">\r\n            <ShelfGrid shelfBooks={props.shelfBooks} changeShelf={props.changeShelf} />\r\n        </div>\r\n    );  \r\n};\r\n\r\nexport default bookShelf;","import React from 'react';\r\n\r\nimport ShelfTitle from './Shelf/ShelfTitle/ShelfTitle';\r\nimport BookOnShelf from './Shelf/BookOnShelf/BookOnShelf';\r\n\r\nconst bookShelf = (props) => {\r\n    let title = 'Want To read';\r\n    if (props.title === 'currentlyReading') {\r\n        title = 'Currently Reading';\r\n    }\r\n    if (props.title === 'read') {\r\n        title = 'Read';\r\n    };\r\n\r\n    return (\r\n        <div className=\"bookshelf\">\r\n            <ShelfTitle title={title} />\r\n            <BookOnShelf shelfBooks={props.shelfBooks} changeShelf={props.changeShelf} shelf={props.title} />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default bookShelf;","import React, { Component } from 'react';\r\n\r\nimport * as BooksAPI from '../BooksAPI';\r\nimport { NavLink } from 'react-router-dom';\r\nimport BookShelf from '../components/BookShelf/BookShelf';\r\n//State ->\r\n// allBooks -> all books that are on the shelf\r\n// readStats -> current books on each shelf\r\n\r\n\r\nclass MainPage extends Component {\r\n    state = {\r\n        allBooks: [],\r\n        readStatus: {\r\n            wantToRead: [],\r\n            currentlyReading: [],\r\n            read: []\r\n        }\r\n    };\r\n    //Fetch all books that are currently on shelf \r\n    componentDidMount() {\r\n        this.getAllBooks()\r\n    };\r\n\r\n    // used to fetch books from the API and distrubte them on shelfs\r\n    getAllBooks = () => {\r\n        BooksAPI.getAll().then(res => this.setState({ allBooks: res }, () => {\r\n            const allBooks = [...this.state.allBooks]\r\n            const updateReadStatus = { ...this.state.readStatus, wantToRead: [], currentlyReading: [], read: [] }\r\n            for (let book of allBooks) {\r\n                updateReadStatus[book.shelf].push(book)\r\n            };\r\n            this.setState({ readStatus: updateReadStatus });\r\n        }));\r\n    };\r\n\r\n    //Changing between shelfs \r\n    changeShelfHandler = (idObj, event) => {\r\n        const readType = event.target.value\r\n        BooksAPI.update(idObj, readType).then(res => this.getAllBooks());\r\n    };\r\n\r\n    render() {\r\n        const toSearch = (\r\n            <div className=\"open-search\">\r\n                <NavLink to='/search'>\r\n                    <button>add a book</button>\r\n                </NavLink>\r\n            </div>\r\n        );\r\n        return (\r\n            <div className=\"list-books\">\r\n                <div className=\"list-books-title\">\r\n                    <h1>MyReads</h1>\r\n                </div>\r\n                <div className=\"list-books-content\">\r\n                    <BookShelf\r\n                        shelfBooks={this.state.readStatus.wantToRead}\r\n                        title={\"wantToRead\"}\r\n                        changeShelf={this.changeShelfHandler} />\r\n                    <BookShelf\r\n                        shelfBooks={this.state.readStatus.currentlyReading}\r\n                        title={\"currentlyReading\"}\r\n                        changeShelf={this.changeShelfHandler} />\r\n                    <BookShelf\r\n                        shelfBooks={this.state.readStatus.read}\r\n                        title={\"read\"}\r\n                        changeShelf={this.changeShelfHandler} />\r\n                </div>\r\n                {toSearch}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n\r\nexport default MainPage;","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Search from './containers/SearchBooks';\r\nimport MainPage from './containers/MainPage';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nclass BooksApp extends React.Component {\r\n  render() {\r\n    const routes = (\r\n      <Switch>\r\n          <Route path='/search'  exact component={Search} />\r\n          <Route path='/'  component={MainPage} />\r\n      </Switch>\r\n    );\r\n    return (\r\n      <div className=\"app\">\r\n      {routes}\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default BooksApp;\r\n","import React from 'react'\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nconst app = (\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>\r\n)\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n"],"sourceRoot":""}